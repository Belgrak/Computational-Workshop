import math

import scipy.integrate as spi
import numpy as np
from scipy import integrate, optimize
from Labs.Lab1 import lab1, approximation_methods

N = 5
EPS = 10 ** -10


def poly(x):
    return sum(x ** j for j in range(N))


def f(x):
    return math.sin(x)


def p(x):
    return math.exp(x)


def ikf(func, a, b, n):
    h = (b - a) / n
    nodes = [a + i * h for i in range(n)]
    moments = [integrate.quad(lambda x: p(x) * x ** k, a, b)[0] for k in range(n)]
    coefficients = np.linalg.solve(np.rot90(np.vander(nodes)), moments)
    print("–ú–æ–º–µ–Ω—Ç—ã –≤–µ—Å–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", moments)
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–∑–ª—ã:", nodes)
    print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ò–ö–§:", coefficients)
    approx_integral = sum(coeff * func(node) for node, coeff in zip(nodes, coefficients))
    return approx_integral


def kfnast(func, a, b, n):
    h = (b - a) / n
    nodes = []
    moments = [integrate.quad(lambda x: p(x) * x ** k, a, b)[0] for k in range(2 * n)]
    matr_left = np.array([[moments[j] for j in range(i, i + n)] for i in range(n)])
    a_list = np.linalg.solve(matr_left, [(-1) * moments[i] for i in range(n, 2 * n)])
    w_n = lambda x: x**n + sum(a_list[i] * x ** i for i in range(n))
    sections = lab1.localize_roots(a, b, w_n, n)
    for i, j in sections:
        steps, approximated_x, diff, first_approximation = approximation_methods.secant_method(i, j, w_n, EPS)
        nodes.append(approximated_x)

    coefficients = np.linalg.solve(np.rot90(np.vander(nodes)), moments[:n])
    print("–ú–æ–º–µ–Ω—Ç—ã –≤–µ—Å–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", moments)
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–π –º–Ω–æ–≥–æ—á–ª–µ–Ω:", "x**n + " + " + ".join(f"{a_list[i]} * x ** {i}" for i in range(n)))
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–∑–ª—ã:", nodes)
    print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ö–§–ù–ê–°–¢:", coefficients)
    approx_integral = sum(coeff * func(node) for node, coeff in zip(nodes, coefficients))
    return approx_integral


print("–ü—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ö–§ –ù–ê–°–¢. –í–∞—Ä–∏–∞–Ω—Ç 8. [ùëé, ùëè] = [0, 1], ùëì(ùë•) = sin(ùë•), ùúå(ùë•) = ùëí^x")
a, b = float(input("–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è a: ")), float(input("–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è b: "))

d = {f: "sin(x)", poly: "1 + " + " + ".join(f"x^{h}" for h in range(1, N))}
for i in [poly, f]:
    print("\n===================================")
    print("–§—É–Ω–∫—Ü–∏—è:", d[i])
    real_val, _ = spi.quad(lambda x: i(x) * p(x), a, b)
    print("–ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ –ø–æ –æ—Ç—Ä–µ–∑–∫—É [a, b] –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ sympy:", real_val)
    ikf_result = ikf(i, a, b, N)
    print(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ö–§ ({N} —É–∑–ª–æ–≤): {ikf_result:.15f}")
    print("–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å:", abs(ikf_result - real_val))
    kfnast_result = kfnast(i, a, b, N)
    print(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö–§–ù–ê–°–¢ ({N} —É–∑–ª–æ–≤): {kfnast_result:.15f}")
    print("–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å:", abs(kfnast_result - real_val))